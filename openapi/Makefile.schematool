# base on tool schematools
# - https://github.com/kstasik/schema-tools
# - https://github.com/kstasik/schema-tools-templates/blob/35d1f9e0d9813ed2431e29a56057a7a53e07ac43/tests/rust/Makefile

.PHONY: all install-tools clean

API_VERSION := $(shell cat spec/api.yaml | grep '^  version' | cut -d' ' -f4)

SCHEMATOOLS_VERSION := v0.19.1
SCHEMATOOLS_BIN = build/tools/schematools-$(SCHEMATOOLS_VERSION)
FORMAT =
SCHEMATOOLS_PLATFORM =

openapi: install-tools format
	mkdir -p build/publish/

	$(SCHEMATOOLS_BIN) chain -vv \
		-c 'process dereference spec/api.yaml --skip-root-internal-references --skip-references json.schemas.registry.com --create-internal-references' \
		-c 'process merge-all-of - --leave-invalid-properties --filter "x-skip!=true"' \
		-c 'validate openapi -' \
		-c 'output -o json --to-file build/publish/v${API_VERSION}.json'

	cp build/publish/v${API_VERSION}.json build/publish/latest.json

codegen: install-tools format
	@echo generating code ...
	mkdir -p build/src/

	$(SCHEMATOOLS_BIN) chain -vvvv \
		-c 'process dereference spec/api.yaml --skip-root-internal-references --create-internal-references' \
		-c 'process merge-all-of - --leave-invalid-properties --filter "x-skip!=true"' \
		-c 'process name - --overwrite --resource-method-version' \
		-c 'codegen openapi - --template templates::rust/_common/ --template templates::rust/server-actix/ ${FORMAT} --target-dir build/src/ -o qs=serde_qs' \
		-c 'codegen openapi - --template templates::rust/_common/ --template templates::rust/client/ --format "rustfmt --edition 2021" --target-dir build/src/client/ -o qs=serde_qs -o apm=tracing-opentelemetry -o namespace=devices -o name=DevicesClient'

install-tools: platform
	@echo installing tools ...

	mkdir -p build/tools/

	if [ ! -f ./tools/schematools-$(SCHEMATOOLS_VERSION) ]; then \
		curl -Lo build/tools/schematools.tar.gz https://github.com/kstasik/schema-tools/releases/download/$(SCHEMATOOLS_VERSION)/schematools-$(SCHEMATOOLS_PLATFORM).tar.gz; \
		tar -xvf build/tools/schematools.tar.gz -C build/tools/; \
		mv build/tools/schematools-$(SCHEMATOOLS_PLATFORM) build/tools/schematools-$(SCHEMATOOLS_VERSION); \
		chmod u+x build/tools/schematools-$(SCHEMATOOLS_VERSION); \
		rm build/tools/schematools.tar.gz; \
	fi

format:
	$(info Trying to find rustfmt)
ifneq (, $(shell which rustfmt))
    $(eval FORMAT := --format "rustfmt --edition 2021")
endif

platform:
	$(info Detecting platform)
    $(eval SCHEMATOOLS_PLATFORM := )

ifeq ($(OS),Windows_NT)
	$(error Windows not yet supported)
endif

    UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
    SCHEMATOOLS_PLATFORM = linux
else ifeq ($(UNAME_S),Darwin)
    SCHEMATOOLS_PLATFORM = darwin
else
    $(error Cannot detect os ${UNAME_S})
endif

    UNAME_M := $(shell uname -m)
ifeq ($(UNAME_M),x86_64)
	SCHEMATOOLS_PLATFORM := $(addsuffix -amd64,$(SCHEMATOOLS_PLATFORM))
else ifneq ($(filter arm%,$(UNAME_M)),)
	SCHEMATOOLS_PLATFORM := $(addsuffix -arm64,$(SCHEMATOOLS_PLATFORM))
else
	$(error Cannot detect architecture ${UNAME_M})
endif

    $(info Platform detected: ${SCHEMATOOLS_PLATFORM})

clean:
	@echo cleaning ...
