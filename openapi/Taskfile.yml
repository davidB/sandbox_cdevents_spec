version: "3"

tasks:
  openapi-generator:download-jar:
    run: once
    internal: true
    cmds:
      - mkdir .cache || true
      - curl -SLf https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.9.0/openapi-generator-cli-7.9.0.jar -o .cache/openapi-generator-cli.jar
    status:
      - test -d .cache
      - test -f .cache/openapi-generator-cli.jar

  openapi-generator:
    internal: true
    cmds:
      # with docker, it's not possible to use custom templates by changing the classpath to include the templates directory
      # - docker run --rm -it --name openapi-generator -u $(id -u ${USER}):$(id -g ${USER}) -v ${PWD}:/local --workdir /local openapitools/openapi-generator-cli {{.ARGS}}
      - task: openapi-generator:download-jar
      - java -cp openapi-generator.conf.d/resources:.cache/openapi-generator-cli.jar org.openapitools.codegen.OpenAPIGenerator {{.ARGS}}
    interactive: true

  openapi-generator-cli:
    desc: allow to call openapi-generator-cli directly by passing arguments after `--` (eg. `task openapi-generator-cli -- help`)
    cmds:
      - task: openapi-generator
        vars:
          ARGS: "{{ .CLI_ARGS }}"

  openapi-generator:generate:
    internal: true
    cmds:
      # - rm -rf build/{{.LANG}}
      - task: openapi-generator
        vars:
          # `batch` is less verbose than `generate` (less warning and info logged) but allow to groug into one config file
          # ARGS: "generate -i spec/openapi.yaml -g {{.LANG}} -o build/{{.LANG}} --global-property models,modelDocs=false,generateAliasAsModel=true"
          ARGS: "generate --config openapi-generator.conf.d/{{.LANG}}.yaml"
          # ARGS: "batch --fail-fast --verbose openapi-generator.conf.d/{{.LANG}}.yaml"
    sources:
      - spec/**.yaml
      - openapi-generator.conf.d/resources/templates/{{.LANG}}/**
    generates:
      - build/{{.LANG}}/**

  schematools:download:
    run: once
    internal: true
    env:
      SCHEMATOOLS_VERSION: v0.19.2
      SCHEMATOOLS_PLATFORM: linux-amd64
    cmds:
      - mkdir .cache || true
      - curl -sLfo .cache/schematools.tar.gz https://github.com/kstasik/schema-tools/releases/download/${SCHEMATOOLS_VERSION}/schematools-${SCHEMATOOLS_PLATFORM}.tar.gz
      - tar -xf .cache/schematools.tar.gz -C.cache/ schematools-${SCHEMATOOLS_PLATFORM}
      - mv .cache/schematools-${SCHEMATOOLS_PLATFORM} .cache/schematools
      - chmod u+x .cache/schematools
      - rm .cache/schematools.tar.gz
    status:
      - test -d .cache
      - test -f .cache/schematools

  schematools:
    internal: true
    cmds:
      - task: schematools:download
      - .cache/schematools {{.ARGS}}
    interactive: true

  schematools-cli:
    desc: allow to call schematools directly by passing arguments after `--` (eg. `task schematools-cli -- --help`)
    cmds:
      - task: schematools
        vars:
          ARGS: "{{ .CLI_ARGS }}"

  schematools:generate:
    internal: true
    cmds:
      # - rm -rf build/{{.LANG}}
      - task: schematools
        vars:
          ARGS: "codegen openapi -vv spec/openapi.yaml --template schematools/templates/{{.LANG}} --target-dir build/schematools/{{.LANG}} --wrappers"
          # ARGS: >
          #   chain -vv
          #   -c 'process dereference spec/openapi.yaml --skip-root-internal-references --skip-references json.schemas.registry.com --create-internal-references'
          #   -c 'process merge-all-of - --leave-invalid-properties --filter "x-skip!=true"'
          #   -c 'process name - --overwrite --resource-method-version'
          #   -c 'codegen openapi - --template schematools/templates/{{.LANG}} --target-dir build/schematools/{{.LANG}}'
    # sources:
    #   - spec/**.yaml
    #   - schematools.conf.d/templates/{{.LANG}}/**
    # generates:
    #   - build/schematools/{{.LANG}}/**

  schematools:debug:
    cmds:
      - mkdir -p build/schematools || true
      - task: schematools
        vars:
          ARGS: >
            chain -vv
            -c 'process dereference spec/openapi.yaml --skip-root-internal-references --skip-references json.schemas.registry.com --create-internal-references'
            -c 'process merge-all-of - --leave-invalid-properties --filter "x-skip!=true"'
            -c 'output -o yaml --to-file build/schematools/openapi.yaml'

  ci:
    cmds:
      - task: validate
      - task: codegen

  validate:
    cmds:
      - task: openapi-generator
        vars:
          ARGS: "validate -i spec/openapi.yaml"
      # - task: schematools
      #   vars:
      #     ARGS: "validate openapi spec/openapi.yaml"

  codegen:
    cmds:
      - task: codegen:java
      - task: codegen:go
      - task: codegen:markdown
      - task: codegen:python
      - task: codegen:rust

  codegen:go:
    cmds:
      - task: openapi-generator:generate
        vars:
          LANG: go

  codegen:java:
    cmds:
      - task: openapi-generator:generate
        vars:
          LANG: java

  codegen:markdown:
    cmds:
      - task: openapi-generator:generate
        vars:
          LANG: markdown

  codegen:markdown2:
    cmds:
      - task: schematools:generate
        vars:
          LANG: markdown

  codegen:python:
    cmds:
      - task: openapi-generator:generate
        vars:
          LANG: python

  codegen:rust:
    cmds:
      - task: openapi-generator:generate
        vars:
          LANG: rust
