import {
  defaultRustRenderCompleteModelOptions,
  RUST_COMMON_PRESET,
  RustFileGenerator,
  RustPackageFeatures,
  RustRenderCompleteModelOptions,
} from "@asyncapi/modelina";
import fs from "fs";
import yaml from "js-yaml";
import * as path from "path";

// change the working directory to allow the resolution of relative paths in yaml
process.chdir("spec");
const doc = yaml.load(fs.readFileSync("asyncapi.yaml", "utf8"));
//console.log(doc);

export async function generate(): Promise<void> {
  // initialize the generator from a preset
  const generator = new RustFileGenerator({
    presets: [
      {
        preset: RUST_COMMON_PRESET,
        options: {
          implementNew: true,
          implementDefault: true,
        },
      },
    ],
  });
  // Generated files will be written to output/ directory
  const outDir = path.join(__dirname, "build/modelina-ts/rust");

  // Run the file generator with options
  const models = await generator.generateToPackage(doc, outDir, {
    ...defaultRustRenderCompleteModelOptions,
    supportFiles: false, // generate Cargo.toml and lib.rs
    package: {
      packageName: "cdevents-rs-example",
      packageVersion: "1.0.0",
      // set authors, homepage, repository, and license
      // authors: [""],
      // homepage: "https://...",
      // repository: "https://...",
      //license: "Apache-2.0",
      // description: "Rust models generated by AsyncAPI Modelina",
      edition: "2018",
      // enable serde_json
      packageFeatures: [RustPackageFeatures.json] as RustPackageFeatures[],
    },
  } as RustRenderCompleteModelOptions);
  for (const model of models) {
    //console.log(model.result);
    console.log(model.modelName);
  }
}
if (require.main === module) {
  generate();
}
